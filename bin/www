#!/usr/bin/env node
'use strict'



/*
 * Module dependencies.
 */
var  app = require('../app'),
   debug = require('debug')('passport-local-express4:server'),
    http = require('http'),
   https = require('https'),
      fs = require('fs'),
  server, privateKey, certificate, credentials;

/*
 * Get port from environment and store in Express.
 */
var port = 4002;
app.set('port', port);

/*
 * Create HTTP/HTTPS server.
 */
if (process.argv[2] == 'local') {
    privateKey  = null;
    certificate = null;
    credentials = null;
    server = http.createServer(app);
    console.log(`Running http on port: ${port}`);
}
else {
    privateKey  = fs.readFileSync('/etc/letsencrypt/live/ogilvie.us.com/privkey.pem', 'utf8');
    certificate = fs.readFileSync('/etc/letsencrypt/live/ogilvie.us.com/cert.pem', 'utf8');
    credentials = {key: privateKey, cert: certificate};
    server = https.createServer(credentials, app);
    console.log(`Running https on port: ${port}`);
}



/*
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/*
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/*
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
